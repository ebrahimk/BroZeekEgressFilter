version: "3"

services:
  attacker_router:
    image: "broplatform/bro:3.0.0"
    cap_add:
      - ALL
    networks:
      attacker_net:
        ipv4_address: 172.20.2.3
      router_net:
        ipv4_address: 172.20.1.2
      elks:
    volumes:
      - ./zeek:/var/log/zeek_logs
    environment: 
      - THIS_SUBNET=172.20.2.0/24
    # set LOCAL_IP to the ip address associated with eth0
    command: bash -c "ip route add 172.20.3.0/24 via 172.20.1.3 && 
                      ip route add 172.20.4.0/24 via 172.20.1.4 && 
                      cd /var/log/zeek_logs && 
                      zeek -i eth0 main.zeek"

  victim_router:
    build:
      context: ./debian
      dockerfile: Dockerfile 
    cap_add:
      - ALL
    networks:
      router_net: 
        ipv4_address: 172.20.1.3
      victim_net:
        ipv4_address: 172.20.3.3
    command: bash -c " ip route add 172.20.2.0/24 via 172.20.1.2 && 
                      ip route add 172.20.4.0/24 via 172.20.1.4 && 
                      tail -f /dev/null"

  reflection_router:
    build:
      context: ./debian
      dockerfile: Dockerfile 
    cap_add:
      - ALL
    networks:
      router_net: 
        ipv4_address: 172.20.1.4
      reflection_net:
        ipv4_address: 172.20.4.3
    command: bash -c " ip route add 172.20.2.0/24 via 172.20.1.2 && 
                      ip route add 172.20.3.0/24 via 172.20.1.3 && 
                      tail -f /dev/null"

  # host containers
  attacker:
    build:
      context: ./debian
      dockerfile: Dockerfile 
    cap_add:
      - ALL
    depends_on:
      - victim
      - victim_router
      - attacker_router
    environment:
      - DEFAULT_IP=172.20.2.1
      - GATEWAY_IP=attacker_router     
    networks:
      - attacker_net
    stdin_open: true
    tty: true

  victim:
    build:
      context: ./debian
      dockerfile: Dockerfile 
    cap_add:
      - ALL
    environment:
      - DEFAULT_IP=172.20.3.1
      - GATEWAY_IP=victim_router 
    networks:
      victim_net:
        ipv4_address: 172.20.3.2
    stdin_open: true
    tty: true

  reflection:
    build:
      context: ./debian
      dockerfile: Dockerfile 
    depends_on:
      - reflection_router
    cap_add:
      - ALL
    environment:
      - DEFAULT_IP=172.20.4.1
      - GATEWAY_IP=reflection_router
    networks:
      - reflection_net
    stdin_open: true
    tty: true
    deploy:
      replicas: 4
  

  # Elastic stack containers
  elasticsearch: 
      image: "docker.elastic.co/elasticsearch/elasticsearch:7.7.0"
      environment:
          - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
          - "discovery.type=single-node"
      ports:
          - "9200:9200"
          - "9300:9300"
      networks:
          - elks
      volumes:
          - ./data:/usr/share/elasticsearch/data

  kibana:
      image: "docker.elastic.co/kibana/kibana:7.7.0"
      depends_on:
          - elasticsearch
      ports:
          - "5601:5601"
      networks:
          - elks

  filebeat:
      image: "docker.elastic.co/beats/filebeat:7.7.0"
      user: root
      depends_on:
          - elasticsearch
      networks:
          - elks
      volumes:
          - ./elastic_stack/filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
          - ./zeek:/var/log/zeek_logs
          
  # Plain Zeek instance 
  # Built with https://github.com/zeek/zeek-docker.git
  # make --name=zeek build-stamp_3.0.0 
  # zeek:
  #     image: "broplatform/bro:3.0.0"
  #     environment:
  #         - LOCAL_IP=172.20.2.5           #ENV
  #     networks:
  #       elks:
  #       attacker_net:
  #         ipv4_address: "172.20.2.5"       #SHOULD WE PLACE THE ZEEK INSTANCE ON THE ROUTER?
  #     volumes:
  #         - ./zeek:/var/log/zeek_logs
  #     command: bash -c "cd /var/log/zeek_logs && zeek -i eth0 main.zeek"   # ENV
      
networks:
  # WAN network
  router_net:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.1.0/24

  attacker_net:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.2.0/24

  victim_net:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.3.0/24

  reflection_net:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.4.0/24

  elks:
      driver: bridge

# FOR openWRT containers command: ash -c "mkdir -p /var/lock && opkg update && opkg install uhttpd && opkg update && opkg install luci"
# Run  docker-compose --compatibility up 
